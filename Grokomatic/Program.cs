using Grokomatic.Models;
using Newtonsoft.Json;
using System.Text;
using Grokomatic.Services;
using Grokomatic;
using Tweetinvi;

string openAiApiKey;
string grokApiKey;
string basePath;
string txtFile;
string logFile;
string pngFile;
string jpgFile;
string xConsumerKey;
string xConsumerSecret;
string xAccessToken;
string xAccessTokenSecret;
string pageAccessToken;
string pageId;

try
{
    Initialize();    

    string postText = GeneratePost();
    File.WriteAllText(txtFile, postText);

    string imagePrompt = GenerateImagePrompt(postText);
    
    await GenerateImage(imagePrompt, pngFile);

    Utilities.ConvertPngToJpg(pngFile, jpgFile, 80);

    // Post text and picture on X
    await PostOnX(postText, jpgFile);

    // Post text and picture on Facebook
    var fbPost = new FacebookService();
    await fbPost.PostOnFacebook(postText, jpgFile, pageAccessToken, pageId);

    // Post text and picture on Instagram

}
catch (Exception ex)
{
    Console.WriteLine($"An error occurred: {ex.Message}");
}

void Initialize()
{
    openAiApiKey = Utilities.GetEnvironmentVariable("OPENAI_API_KEY");
    grokApiKey = Utilities.GetEnvironmentVariable("GROK_API_KEY");
    xConsumerKey = Utilities.GetEnvironmentVariable("X_API_KEY");
    xConsumerSecret = Utilities.GetEnvironmentVariable("X_API_SECRET");
    xAccessToken = Utilities.GetEnvironmentVariable("X_ACCESS_TOKEN");
    xAccessTokenSecret = Utilities.GetEnvironmentVariable("X_ACCESS_TOKEN_SECRET");
    pageAccessToken = Utilities.GetEnvironmentVariable("FACEBOOK_PAGE_ACCESS_TOKEN");
    pageId = Utilities.GetEnvironmentVariable("FACEBOOK_PAGE_ID");

    basePath = $@"{Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments)}\Grokomatic";
    string fileName = DateTime.Now.ToString("yyyyMMddHHmmss");
    
    if (!Directory.Exists(basePath))
    {
        Directory.CreateDirectory(basePath);
    }

    logFile = Path.Combine(basePath, $"{fileName}.log");
    txtFile = Path.Combine(basePath, $"{fileName}.txt");
    pngFile = Path.Combine(basePath, $"{fileName}.png");
    jpgFile = Path.Combine(basePath, $"{fileName}.jpg");
}

string GeneratePost()
{
    string innovationsPath = "Data/Innovations.json";
    string completionsPath = "Data/Completions.json";

    List<TechInnovation> innovationsPool = Utilities.ReadJsonFile(innovationsPath);
    List<TechInnovation> previouslyPosted = Utilities.ReadJsonFile(completionsPath);
    List<TechInnovation> remainingInnovations = innovationsPool.Except(previouslyPosted).ToList();

    if (remainingInnovations.Count == 0)
    {
        Console.WriteLine("All innovations have been posted. No new posts available.");
        return string.Empty;
    }

    int randomNumber = Utilities.PickRandomNumber(remainingInnovations.Count - 1);
    TechInnovation selectedInnovation = remainingInnovations[randomNumber - 1];

    StringBuilder systemStringBuilder = new StringBuilder();
    systemStringBuilder.Append("You are a helpful assistant that creates social media post based on the user's request.");
    systemStringBuilder.Append("The post should be interesting, fun, accurate information");    
    systemStringBuilder.Append("It should contain appropriate hashtags including #TigerTriangleTechnology");
    systemStringBuilder.Append("Include fun facts. Feel free to strategically place an emoji where appropriate.");
    systemStringBuilder.Append("It should be ready to post as is and be in the format of a social media post with no additional instructions.");

    string userPrompt = $"Please generate text for a single post on social media about {selectedInnovation.Name} ({selectedInnovation.Description}) within the {selectedInnovation.Category} category.";

    string finePrint = "\n\nThis post was generated by AI as an experiment. It may contain errors or inaccuracies. Please feel free to fact check and/or leave a comment on how you think it did. Thanks!";

    var textGenerator = new GrokTextService();
    string textForPost = $"{textGenerator.GenerateText(systemStringBuilder.ToString(), userPrompt, grokApiKey)}{finePrint}";

    // Add selected innovation to the previouslyPosted list
    previouslyPosted.Add(selectedInnovation);

    // Write serialized list of previouslyPosted to completions file in JSON format
    File.WriteAllText(completionsPath, JsonConvert.SerializeObject(previouslyPosted, Formatting.Indented));

    Console.WriteLine("[ASSISTANT]");
    Console.WriteLine(textForPost);    
    File.AppendAllText(logFile, textForPost);
    return textForPost;
}

string GenerateImagePrompt(string rawText)
{
    StringBuilder systemStringBuilder = new StringBuilder();
    systemStringBuilder.Append("You are a helpful assistant that generates a single image prompt for an AI image generator.");
    systemStringBuilder.Append("It will based on text given by the user.");
    systemStringBuilder.Append("It will be passed directly to a model to generate the image.");

    var textGenerator = new GrokTextService();
    string imagePrompt = textGenerator.GenerateText(systemStringBuilder.ToString(), rawText, grokApiKey);

    Console.WriteLine("[ASSISTANT]");
    Console.WriteLine(imagePrompt);
    File.AppendAllText(logFile, imagePrompt);
    return imagePrompt;
}

async Task GenerateImage(string imagePrompt, string filePath)
{
    if (string.IsNullOrEmpty(imagePrompt))
    {
        throw new ArgumentNullException(nameof(imagePrompt));
    }    

    var imageGenerator = new OpenAiImageService();
    try
    {
        await imageGenerator.GenerateImage(imagePrompt, filePath, openAiApiKey);
        Console.WriteLine($"Image generated successfully and saved to {filePath}");
        File.AppendAllText(logFile, $"Image generated successfully and saved to {filePath}");
    }
    catch (Exception ex)
    {
        Console.WriteLine($"An error occurred while generating the image: {ex.Message}");
        File.AppendAllText(logFile, $"An error occurred while generating the image: {ex.Message}");
    }
}

async Task PostOnX(string text, string selectedFilePath)
{
    // Post text and picture on X
    var client = new TwitterClient(
                xConsumerKey,
                xConsumerSecret,
                xAccessToken,
                xAccessTokenSecret
            );

    byte[] mediaData = File.ReadAllBytes(selectedFilePath);

    dynamic? uploadedMedia = null;
    if (selectedFilePath.EndsWith("mp4"))
    {
        uploadedMedia = await client.Upload.UploadTweetVideoAsync(mediaData.ToArray());
    }
    else
    {
        uploadedMedia = await client.Upload.UploadTweetImageAsync(mediaData.ToArray());
    }

    // Check if the image upload was successful
    if (uploadedMedia != null)
    {
        var xPostRequest = new XPostRequest
        {
            Text = text,
            media = new mediaIDS()
            {
                media_ids = [uploadedMedia.Id.ToString()],
            },

        };

        var poster = new XService(client);
        // Send tweet request to Twitter API
        var result = await poster.PostX(xPostRequest);

        // Check if the tweet was successfully posted
        if (result.Response.IsSuccessStatusCode)
        {
            Console.WriteLine($"You published the x post. {result.Content}");
            File.AppendAllText(logFile, $"You published the x post. {result.Content}");
        }
        else
        {
            Console.WriteLine($"Error when posting x post: {result.Content}");
            File.AppendAllText(logFile, $"Error when posting x post: {result.Content}");
        }
    }
    else
    {
        Console.WriteLine("Error when uploading image.");
        File.AppendAllText(logFile, "Error when uploading image.");
    }
}


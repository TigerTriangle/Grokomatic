using Grokomatic.Models;
using Newtonsoft.Json;
using System.Text;
using Serilog;
using Grokomatic.Configs;

namespace Grokomatic.Services
{
    public class AiGeneratorService
    {
        private readonly GrokTextService _grokTextService;

        public AiGeneratorService(GrokTextService grokTextService)
        {
            _grokTextService = grokTextService;
        }

        public string GeneratePostText(AppConfiguration appConfig)
        {
            if (appConfig.GrokApiKey == null) throw new Exception("GrokApiKey is null.");

            string innovationsPath = "Data/Innovations.json";
            string completionsPath = "Data/Completions.json";

            List<TechInnovation> innovationsPool = Utilities.ReadJsonFile(innovationsPath);
            List<TechInnovation> previouslyPosted = Utilities.ReadJsonFile(completionsPath);
            List<TechInnovation> remainingInnovations = innovationsPool.Except(previouslyPosted).ToList();

            if (remainingInnovations.Count == 0)
            {
                Log.Logger.Information("All innovations have been posted. No new posts available.");
                return string.Empty;
            }

            int randomNumber = Utilities.PickRandomNumber(remainingInnovations.Count - 1);
            TechInnovation selectedInnovation = remainingInnovations[randomNumber - 1];

            StringBuilder systemStringBuilder = new StringBuilder();
            systemStringBuilder.Append("You are a helpful assistant that creates social media post based on the user's request.");
            systemStringBuilder.Append("The post should be interesting, fun, accurate information");
            systemStringBuilder.Append("It should contain appropriate hashtags including #TigerTriangleTechnologies");
            systemStringBuilder.Append("Include fun facts. Feel free to strategically place an emoji where appropriate.");
            systemStringBuilder.Append("It should be ready to post as is and be in the format of a social media post with no additional instructions.");

            string userPrompt = $"Please generate text for a single post on social media about {selectedInnovation.Name} ({selectedInnovation.Description}) within the {selectedInnovation.Category} category.";

            string finePrint = "\n\nThis post was generated by AI as an experiment. It may contain errors or inaccuracies. Please feel free to fact check and/or leave a comment on how you think it did. Thanks!";

            string textForPost = $"{_grokTextService.GenerateText(systemStringBuilder.ToString(), userPrompt, appConfig.GrokApiKey)}{finePrint}";

            // Add selected innovation to the previouslyPosted list
            previouslyPosted.Add(selectedInnovation);

            // Write serialized list of previouslyPosted to completions file in JSON format
            File.WriteAllText(completionsPath, JsonConvert.SerializeObject(previouslyPosted, Formatting.Indented));
                        
            Log.Logger.Information("[ASSISTANT] {0}", textForPost);
            
            return textForPost;
        }

        public string GenerateImagePrompt(string rawText, AppConfiguration appConfig)
        {
            if (appConfig.GrokApiKey == null) throw new Exception("GrokApiKey is null.");

            StringBuilder systemStringBuilder = new StringBuilder();
            systemStringBuilder.Append("You are a helpful assistant that generates a single image prompt for an AI image generator.");
            systemStringBuilder.Append("It will based on text given by the user.");
            systemStringBuilder.Append("It will be passed directly to a model to generate the image.");

            string imagePrompt = _grokTextService.GenerateText(systemStringBuilder.ToString(), rawText, appConfig.GrokApiKey);

            Log.Logger.Information("[ASSISTANT] {0}", imagePrompt);

            return imagePrompt;
        }

        public async Task GenerateImage(string imagePrompt, AppConfiguration appConfig)
        {
            if (appConfig.OpenAiApiKey == null) throw new Exception("OpenAiApiKey is null.");
            if (appConfig.PngFile == null) throw new Exception("PngFile path is null.");

            if (string.IsNullOrEmpty(imagePrompt))
            {
                throw new ArgumentNullException(nameof(imagePrompt));
            }

            var imageGenerator = new OpenAiImageService();
            try
            {
                await imageGenerator.GenerateImage(imagePrompt, appConfig.PngFile, appConfig.OpenAiApiKey);

                Log.Logger.Information("Image generated successfully and saved to {0}", appConfig.PngFile);
            }
            catch (Exception ex)
            {
                Log.Logger.Error("An error occurred while generating the image: {0}", ex.Message);
            }
        }        
    }
}
